# Autogenerated with SMOP
from smop.core import *
# basicexample.m


@function
def basicexample(*args,**kwargs):
    varargin = basicexample.varargin
    nargin = basicexample.nargin


    # Verify that Manopt was indeed added to the Matlab path.
    if isempty(which('spherefactory')):
        error(cat('You should first add Manopt to the Matlab path.\\n','Please run importmanopt first.'))


    # Generate the problem data.
    n=1000
# basicexample.m:10
    A=randn(n)
# basicexample.m:11
    A=dot(0.5,(A + A.T))
# basicexample.m:12

    manifold=spherefactory(n)
# basicexample.m:15
    problem.M = copy(manifold)
# basicexample.m:16

    problem.cost = copy(lambda x=None: dot(- x.T,(dot(A,x))))
# basicexample.m:19
    problem.egrad = copy(lambda x=None: dot(dot(- 2,A),x))
# basicexample.m:20
    problem.ehess = copy(lambda x=None,xdot=None: dot(dot(- 2,A),xdot))
# basicexample.m:21

    figure
    checkgradient(problem)
    figure
    checkhessian(problem)

    x,xcost,info=trustregions(problem,nargout=3)

    for item in x:
        print(item + " ")

    print(xcost)
# basicexample.m:30


    # Display some statistics.
    figure
    semilogy(cat(info.iter),cat(info.gradnorm),'.-')
    xlabel('Iteration #')
    ylabel('Gradient norm')
    title('Convergence of the trust-regions algorithm on the sphere')
    return

if __name__ == '__main__':
    basicexample()

