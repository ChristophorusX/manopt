# Autogenerated with SMOP 
from smop.core import *
# lincomb.m

    
@function
def lincomb(M=None,x=None,vecs=None,coeffs=None,*args,**kwargs):
    varargin = lincomb.varargin
    nargin = lincomb.nargin

    # Computes a linear combination of tangent vectors in the Manopt framework.
    
    # vec = lincomb(M, x, vecs, coeffs)
    
    # M is a Manopt manifold structure obtained from a factory.
# x is a point on the manifold M.
# vecs is a cell containing n tangent vectors at x.
# coeffs is a vector of length n
    
    # vec is a tangent vector at x obtained as the linear combination
    
    #    vec = coeffs(1)*vecs{1} + ... + coeffs(n)*vecs{n}
    
    # See also: grammatrix orthogonalize tangentorthobasis
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, April 28, 2016.
# Contributors: 
# Change log:
    
    n=numel(vecs)
# lincomb.m:23
    assert_(numel(coeffs) == n)
    if 0 == n:
        vec=M.zerovec(x)
# lincomb.m:30
    else:
        if 1 == n:
            vec=M.lincomb(x,coeffs[1],vecs[1])
# lincomb.m:34
        else:
            vec=M.lincomb(x,coeffs[1],vecs[1],coeffs[2],vecs[2])
# lincomb.m:38
            for k in arange(3,n).reshape(-1):
                vec=M.lincomb(x,1,vec,coeffs[k],vecs[k])
# lincomb.m:42
    
    
    return vec
    
if __name__ == '__main__':
    pass
    