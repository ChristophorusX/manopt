# Autogenerated with SMOP 
from smop.core import *
# grammatrix.m

    
@function
def grammatrix(M=None,x=None,vectors=None,*args,**kwargs):
    varargin = grammatrix.varargin
    nargin = grammatrix.nargin

    # Computes the Gram matrix of tangent vectors in the Manopt framework.
    
    # function G = grammatrix(M, x, vectors)
    
    # M is a Manopt manifold structure obtained from a factory.
# x is a point on the manifold M.
# vectors is a cell containing n tangent vectors at x.
    
    # G is an n-by-n symmetric positive semidefinite matrix such that G(i, j)
# is the inner product between vectors{i} and vectors{j}, with respect to
# the metric on the tangent space to M at x.
    
    # See also: orthogonalize tangentorthobasis
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, April 28, 2016.
# Contributors: 
# Change log:
    
    n=numel(vectors)
# grammatrix.m:22
    G=zeros(n)
# grammatrix.m:24
    for i in arange(1,n).reshape(-1):
        vi=vectors[i]
# grammatrix.m:28
        G[i,i]=M.inner(x,vi,vi)
# grammatrix.m:30
        for j in arange((i + 1),n).reshape(-1):
            vj=vectors[j]
# grammatrix.m:34
            G[i,j]=M.inner(x,vi,vj)
# grammatrix.m:35
            # but it does not hurt to allow for complex inner products
			# here by taking the conjugate.
            G[j,i]=G[i,j].T
# grammatrix.m:40
    
    return G
    
if __name__ == '__main__':
    pass
    