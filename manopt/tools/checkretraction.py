# Autogenerated with SMOP 
from smop.core import *
# checkretraction.m

    
@function
def checkretraction(M=None,x=None,v=None,*args,**kwargs):
    varargin = checkretraction.varargin
    nargin = checkretraction.nargin

    # Check the order of agreement of a retraction with an exponential.
# 
# function checkretraction(problem)
# function checkretraction(problem, x)
# function checkretraction(problem, x, v)
    
    # checkretraction performs a numerical test to check the order of agreement
# between the retraction and the exponential map in a given Manopt
# manifold structure M. The test is performed at the point x if it is
# provided (otherwise, the point is picked at random) and along the tangent
# vector v at x if one is provided (otherwise, a tangent vector at x is
# picked at random.)
    
    # See also: checkdiff checkgradient checkhessian
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Oct. 21, 2016.
# Contributors: 
# Change log:
    
    if logical_not(exist('x','var')) or isempty(x):
        x=M.rand()
# checkretraction.m:23
        v=M.randvec(x)
# checkretraction.m:24
    
    
    if logical_not(exist('v','var')) or isempty(v):
        v=M.randvec(x)
# checkretraction.m:28
    
    
    # Compare the retraction and the exponential over steps of varying
    # length, on a wide log-scale.
    tt=logspace(- 12,0,251)
# checkretraction.m:33
    ee=zeros(size(tt))
# checkretraction.m:34
    for k in arange(1,numel(tt)).reshape(-1):
        t=tt[k]
# checkretraction.m:36
        ee[k]=M.dist(M.exp(x,v,t),M.retr(x,v,t))
# checkretraction.m:37
    
    
    # Plot the difference between the exponential and the retration over
    # that span of steps, in log-log scale.
    loglog(tt,ee)
    
    # the slope is only 2, we have a first-order retration. If the slope is
    # less than 2, this is not a retraction.
    # Slope 3
    line('xdata',cat(1e-12,1.0),'ydata',cat(1e-30,1000000.0),'color','k','LineStyle','--','YLimInclude','off','XLimInclude','off')
    
    line('xdata',cat(1e-14,1.0),'ydata',cat(1e-20,100000000.0),'color','k','LineStyle',':','YLimInclude','off','XLimInclude','off')
    
    # of the error curve which is mostly linear.
    window_len=10
# checkretraction.m:59
    range_,poly=identify_linear_piece(log10(tt),log10(ee),window_len,nargout=2)
# checkretraction.m:60
    hold('all')
    loglog(tt[range_],10.0 ** polyval(poly,log10(tt[range_])),'LineWidth',3)
    hold('off')
    xlabel('Step size multiplier t')
    ylabel('Distance between Exp(x, v, t) and Retr(x, v, t)')
    title(sprintf('Retraction check.\\nA slope of 2 is required, 3 is desired.'))
    fprintf('Check agreement between M.exp and M.retr. Please check the\\n')
    fprintf('factory file of M to ensure M.exp is a proper exponential.\\n')
    fprintf('The slope must be at least 2 to have a proper retraction.\\n')
    fprintf('For the retraction to be second order, the slope should be 3.\\n')
    fprintf('It appears the slope is: %g.\\n',poly[1])
    return
    
if __name__ == '__main__':
    pass
    