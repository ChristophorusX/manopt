# Autogenerated with SMOP 
from smop.core import *
# diagsum.m

    
@function
def diagsum(tensor1=None,d1=None,d2=None,*args,**kwargs):
    varargin = diagsum.varargin
    nargin = diagsum.nargin

    # C = DIAGSUM(A, d1, d2) Performs the trace
# C(i[1],...,i[d1-1],i[d1+1],...,i[d2-1],i[d2+1],...i[n]) =
#              A(i[1],...,i[d1-1],k,i[d1+1],...,i[d2-1],k,i[d2+1],...,i[n])
# (Sum on k).
    
    # C = DIAGSUM(A, d1, d2) traces A along the diagonal formed by dimensions d1
# and d2. If the lengths of these dimensions are not equal, DIAGSUM traces
# until the end of the shortest of dimensions d1 and d2 is reached. This is
# an analogue of the built in TRACE function.
    
    # Wynton Moore, January 2006
    
    dim1=size(tensor1)
# diagsum.m:15
    numdims=length(dim1)
# diagsum.m:16
    #check inputs
    if d1 == d2:
        tracedtensor=squeeze(sum(tensor1,d1))
# diagsum.m:21
    else:
        if numdims == 2:
            tracedtensor=trace(tensor1)
# diagsum.m:23
        else:
            if dim1[d1] == 1 and dim1[d2] == 1:
                tracedtensor=squeeze(tensor1)
# diagsum.m:25
            else:
                #determine correct permutation
                swapd1=copy(d1)
# diagsum.m:30
                swapd2=copy(d2)
# diagsum.m:30
                if d1 != numdims - 1 and d1 != numdims and d2 != numdims - 1:
                    swapd1=numdims - 1
# diagsum.m:33
                else:
                    if d1 != numdims - 1 and d1 != numdims and d2 != numdims:
                        swapd1=copy(numdims)
# diagsum.m:35
                if d2 != numdims - 1 and d2 != numdims and swapd1 != numdims - 1:
                    swapd2=numdims - 1
# diagsum.m:38
                else:
                    if d2 != numdims - 1 and d2 != numdims and swapd1 != numdims:
                        swapd2=copy(numdims)
# diagsum.m:40
                #prepare for construction of selector tensor
                temp1=eye(numdims)
# diagsum.m:45
                permmatrix=copy(temp1)
# diagsum.m:46
                permmatrix[:,d1]=temp1[:,swapd1]
# diagsum.m:47
                permmatrix[:,swapd1]=temp1[:,d1]
# diagsum.m:48
                permmatrix[:,d2]=temp1[:,swapd2]
# diagsum.m:49
                permmatrix[:,swapd2]=temp1[:,d2]
# diagsum.m:50
                selectordim=dot(dim1,permmatrix)
# diagsum.m:52
                permvector=dot((arange(1,numdims)),permmatrix)
# diagsum.m:53
                if numdims > 3:
                    selector=ipermute(outer(ones(selectordim[1:numdims - 2]),eye(selectordim[numdims - 1],selectordim[numdims]),0),permvector)
# diagsum.m:58
                else:
                    #when numdims=3, the above line gives ndims(selector)=4. This
        #routine avoids that error. When used with GMDMP, numdims will be
        #at least 4, so this routine will be unnecessary.
                    selector2=eye(selectordim[numdims - 1],selectordim[numdims])
# diagsum.m:67
                    selector=zeros(selectordim)
# diagsum.m:68
                    for j in arange(1,selectordim[1]).reshape(-1):
                        selector[j,:,:]=selector2
# diagsum.m:70
                    selector=ipermute(selector,permvector)
# diagsum.m:72
                #perform trace, discard resulting singleton dimensions
                tracedtensor=sum(sum(multiply(tensor1,selector),d1),d2)
# diagsum.m:77
                tracedtensor=squeeze(tracedtensor)
# diagsum.m:78
    
    #correction for abberation in squeeze function:
#size(squeeze(rand(1,1,2)))=[2 1]
    nontracedimensions=copy(dim1)
# diagsum.m:86
    nontracedimensions[d1]=[]
# diagsum.m:87
    if d2 > d1:
        nontracedimensions[d2 - 1]=[]
# diagsum.m:89
    else:
        nontracedimensions[d2]=[]
# diagsum.m:91
    
    tracedsize=size(tracedtensor)
# diagsum.m:93
    # Next line modified, Nicolas Boumal, April 30, 2012, such that
# diagsum(A, 1, 2) would compute the trace of A, a 2D matrix.
    if length(tracedsize) == 2 and tracedsize[2] == 1 and (isempty(nontracedimensions) or tracedsize[1] != nontracedimensions[1]):
        tracedtensor=tracedtensor.T
# diagsum.m:99
    