# Autogenerated with SMOP 
from smop.core import *
# hashmd5.m

    
@function
def hashmd5(inp=None,*args,**kwargs):
    varargin = hashmd5.varargin
    nargin = hashmd5.nargin

    # Computes the MD5 hash of input data.
    
    # function h = hashmd5(inp)
# 
# Returns a string containing the MD5 hash of the input variable. The input
# variable may be of any class that can be typecast to uint8 format, which
# is fairly non-restrictive.
    
    # This file is part of Manopt: www.manopt.org.
# This code is a stripped version of more general hashing code by
# Michael Kleder, Nov 2005.
# Change log: 
# 
#   Aug. 8, 2013 (NB):
#       Made x a static (persistent) variable, in the hope it will speed
#       it up. Furthermore, the function is now Octave compatible.
    
    is_octave=exist('OCTAVE_VERSION','builtin')
# hashmd5.m:19
    
    if isempty(x) and logical_not(is_octave):
        x=java.security.MessageDigest.getInstance('MD5')
# hashmd5.m:23
    
    inp=ravel(inp)
# hashmd5.m:26
    
    if ischar(inp) or islogical(inp):
        inp=uint8(inp)
# hashmd5.m:29
    else:
        inp=typecast(inp,'uint8')
# hashmd5.m:31
    
    
    # Create hash
    if logical_not(is_octave):
        x.update(inp)
        h=typecast(x.digest,'uint8')
# hashmd5.m:37
        h=dec2hex(h).T
# hashmd5.m:38
        if (size(h,1)) == 1:
            h=matlabarray(cat([repmat('0',cat(1,size(h,2)))],[h]))
# hashmd5.m:41
        h=lower(ravel(h).T)
# hashmd5.m:43
    else:
        h=md5sum(char(inp.T),true)
# hashmd5.m:45
    
    
    return h
    
if __name__ == '__main__':
    pass
    