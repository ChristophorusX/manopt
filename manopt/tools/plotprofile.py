# Autogenerated with SMOP 
from smop.core import *
# plotprofile.m

    
@function
def plotprofile(problem=None,x=None,d=None,t=None,*args,**kwargs):
    varargin = plotprofile.varargin
    nargin = plotprofile.nargin

    # Plot the cost function along a geodesic or a retraction path.
    
    # function plotprofile(problem)
# function plotprofile(problem, x)
# function plotprofile(problem, x, d)
# function plotprofile(problem, x, d, t)
# function plotprofile(problem, x, [], t)
# function plotprofile(problem, [], [], t)
    
    # function costs = plotprofile(problem, x, d, t)
    
    # Plot profile evaluates the cost function along a geodesic gamma(t) such
# that gamma(0) = x and the derivative of gamma at 0 is the direction d.
# The input t is a vector specifying for which values of t we must evaluate
# f(gamma(t)) (it may include negative values).
    
    # If the function is called with an output, the plot is not drawn and the
# values of the cost are returned for the instants t.
    
    # If x is omitted, a random point is picked. If d is omitted, a random
# tangent vector at x is picked. If t is omitted, it is generated as a
# linspace over [-1, 1].
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Jan. 9, 2013.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    #   Nov. 12, 2016 (NB):
#       Making more inputs optional.
    
    # Verify that the problem description is sufficient.
    if logical_not(canGetCost(problem)):
        error('It seems no cost was provided.')
    
    
    if logical_not(exist('x','var')) or isempty(x):
        x=problem.M.rand()
# plotprofile.m:42
        if exist('d','var') and logical_not(isempty(d)):
            error('If x is omitted, d should not be specified.')
    
    if logical_not(exist('d','var')) or isempty(d):
        d=problem.M.randvec(x)
# plotprofile.m:48
    
    if logical_not(exist('t','var')) or isempty(t):
        t=linspace(- 1,1,101)
# plotprofile.m:51
    
    
    if isfield(problem.M,'exp'):
        expo=problem.M.exp
# plotprofile.m:55
        str='Exp'
# plotprofile.m:56
    else:
        expo=problem.M.retr
# plotprofile.m:58
        str='Retr'
# plotprofile.m:59
    
    
    storedb=StoreDB()
# plotprofile.m:62
    linesearch_fun=lambda t=None: getCost(problem,expo[x,d,t],storedb)
# plotprofile.m:63
    cost=zeros(size(t))
# plotprofile.m:65
    for i in arange(1,numel(t)).reshape(-1):
        cost[i]=linesearch_fun[t[i]]
# plotprofile.m:67
    
    
    if nargout == 0:
        plot(t,cost)
        xlabel('t')
        ylabel(cat('f(',str,'_x(t*d))'))
    
    
    return cost
    
if __name__ == '__main__':
    pass
    