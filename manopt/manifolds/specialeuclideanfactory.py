# Autogenerated with SMOP 
from smop.core import *
# specialeuclidean/specialeuclideanfactory.m

    
@function
def specialeuclideanfactory(n=None,k=None,*args,**kwargs):
    varargin = specialeuclideanfactory.varargin
    nargin = specialeuclideanfactory.nargin

    # Returns a manifold structure to optimize over the special Euclidean group
# 
# function M = specialeuclideanfactory(n)
# function M = specialeuclideanfactory(n, k)
    
    # The special Euclidean group (the manifold of rigid transformations):
# This is a product manifold of the rotations group SO(n) and the
# translation group R^n, copied k times.
    
    # Points on the manifold are represented as structures X with two fields.
# X.R is a 3D array of size nxnxk such that each slice X.R(:, :, i)
# corresponds to a rotation matrix (orthogonal with determinant 1).
# X.t is a matrix of size nxk such that each column X.t(:, i) corresponds
# to a translation vector.
    
    # Tangent vectors are represented as structures with the same fields. Note
# that rotational components of the tangent vectors are represented in the
# Lie algebra, i.e., each slice Xdot.R(:, :, i) is a skew-symmetric matrix.
# Use M.tangent2ambient(X, Xdot) to obtain a representation in the ambient
# space. This is often necessary when defining problem.ehess(X, Xdot).
    
    # This is a description of SE(n)^k with the induced metric from the
# embedding space (R^nxn)^k x (R^n)^k, i.e., this manifold is a Riemannian
# submanifold of the embedding Euclidean space with the usual inner
# product.
    
    # By default, k = 1.
    
    # This is a test geometry: it may not be the "appropriate" geometry to give
# to SE(n).
    
    # See rotationsfactory and euclideanfactory for details.
    
    # See also: rotationsfactory euclideanfactory
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Sep. 23, 2014.
# Contributors: 
# Change log:
    
    
    if logical_not(exist('k','var')) or isempty(k):
        k=1
# specialeuclidean/specialeuclideanfactory.m:44
    
    
    elements=struct()
# specialeuclidean/specialeuclideanfactory.m:47
    elements.R = copy(rotationsfactory(n,k))
# specialeuclidean/specialeuclideanfactory.m:48
    elements.t = copy(euclideanfactory(n,k))
# specialeuclidean/specialeuclideanfactory.m:49
    M=productmanifold(elements)
# specialeuclidean/specialeuclideanfactory.m:51
    return M
    
if __name__ == '__main__':
    pass
    