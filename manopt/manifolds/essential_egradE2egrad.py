# Autogenerated with SMOP 
from smop.core import *
# essential/essential_egradE2egrad.m

    
@function
def essential_egradE2egrad(X=None,egradE=None,*args,**kwargs):
    varargin = essential_egradE2egrad.varargin
    nargin = essential_egradE2egrad.nargin

    # Converts the gradient in essential matrix E to the gradient in X.
    
    # function egrad = essential_egradE2egrad(X, egradE)
    
    # egradE is the function handle for the gradient in E.
# 
# The output is a matrix in the space of X.
    
    # See also: essential_costE2cost essential_ehessE2ehess
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Roberto Tron, Aug. 8, 2014
# Contributors: Bamdev Mishra, May 22, 2015.
    
    e3hat=matlabarray(cat([0,- 1,0],[1,0,0],[0,0,0]))
# essential/essential_egradE2egrad.m:17
    RA=X[:,1:3,:]
# essential/essential_egradE2egrad.m:18
    RB=X[:,4:6,:]
# essential/essential_egradE2egrad.m:19
    E=multiprod(multiprod(multitransp(RA),e3hat),RB)
# essential/essential_egradE2egrad.m:20
    G=egradE[E]
# essential/essential_egradE2egrad.m:21
    
    egrad=multiprod(e3hat,cat(2,multiprod(RB,multitransp(G)),- multiprod(RA,G)))
# essential/essential_egradE2egrad.m:24
    return egrad
    
if __name__ == '__main__':
    pass
    