# Autogenerated with SMOP 
from smop.core import *
# essential/essential_costE2cost.m

    
@function
def essential_costE2cost(X=None,costE=None,*args,**kwargs):
    varargin = essential_costE2cost.varargin
    nargin = essential_costE2cost.nargin

    # Cost evaluation at X given function handle in the Essential matrix E.
    
    # function val = essential_costE2cost(X, costE)
    
    # costE is the function handle for the cost function in E.
    
    # See also: essential_egradE2egrad essential_ehessE2ehess
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Roberto Tron, Aug. 8, 2014
# Contributors: Bamdev Mishra, May 22, 2015.
    
    e3hat=matlabarray(cat([0,- 1,0],[1,0,0],[0,0,0]))
# essential/essential_costE2cost.m:14
    RA=X[:,1:3,:]
# essential/essential_costE2cost.m:16
    RB=X[:,4:6,:]
# essential/essential_costE2cost.m:17
    E=multiprod(multiprod(multitransp(RA),e3hat),RB)
# essential/essential_costE2cost.m:18
    val=costE[E]
# essential/essential_costE2cost.m:20
    return val
    
if __name__ == '__main__':
    pass
    