# Autogenerated with SMOP 
from smop.core import *
# getLinesearch.m

    
@function
def getLinesearch(problem=None,x=None,d=None,storedb=None,key=None,*args,**kwargs):
    varargin = getLinesearch.varargin
    nargin = getLinesearch.nargin

    # Returns a hint for line-search algorithms.
    
    # function t = getLinesearch(problem, x, d)
# function t = getLinesearch(problem, x, d, storedb)
# function t = getLinesearch(problem, x, d, storedb, key)
    
    # For a line-search problem at x along the tangent direction d, computes
# and returns t such that retracting t*d at x yields a good point around
# where to look for a line-search solution. That is: t is a hint as to
# "how far to look" along the line.
# 
# storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # See also: canGetLinesearch
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, July 17, 2014.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getLinesearch.m:28
        key=storedb.getNewKey()
# getLinesearch.m:30
    
    if isfield(problem,'linesearch'):
        ## Compute the line-search hint function using linesearch.
        # Check whether this function wants to deal with storedb or not.
        if 2 == nargin(problem.linesearch):
            t=problem.linesearch(x,d)
# getLinesearch.m:40
        else:
            if 3 == nargin(problem.linesearch):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getLinesearch.m:43
                t,store=problem.linesearch(x,d,store,nargout=2)
# getLinesearch.m:44
                storedb.setWithShared(store,key)
            else:
                if 4 == nargin(problem.linesearch):
                    # Pass along the whole storedb (by reference), with key.
                    t=problem.linesearch(x,d,storedb,key)
# getLinesearch.m:48
                else:
                    up=MException('manopt:getLinesearch:badfun','linesearch should accept 2, 3 or 4 inputs.')
# getLinesearch.m:50
                    throw(up)
    else:
        ## Abandon computing the line-search function.
        up=MException('manopt:getLinesearch:fail',cat('The problem description is not explicit enough to ','compute a line-search hint.'))
# getLinesearch.m:58
        throw(up)
    
    
    return t
    
if __name__ == '__main__':
    pass
    