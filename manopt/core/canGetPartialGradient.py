# Autogenerated with SMOP 
from smop.core import *
# canGetPartialGradient.m

    
@function
def canGetPartialGradient(problem=None,*args,**kwargs):
    varargin = canGetPartialGradient.varargin
    nargin = canGetPartialGradient.nargin

    # Checks whether the partial gradient can be computed for a given problem.
# 
# function candoit = canGetPartialGradient(problem)
    
    # Returns true if the partial gradient of the cost function can be computed
# given the problem description, false otherwise.
    
    # See also: getPartialGradient canGetPartialEuclideanGradient
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, June 28, 2016.
# Contributors: 
# Change log:
    
    candoit=(isfield(problem,'partialgrad') and isfield(problem,'ncostterms')) or canGetPartialEuclideanGradient(problem)
# canGetPartialGradient.m:16
    if isfield(problem,'partialgrad') and logical_not(isfield(problem,'ncostterms')):
        warning('manopt:partialgrad',cat('If problem.partialgrad is specified, indicate the number n\\n','of terms in the cost function with problem.ncostterms = n.'))
    
    
    return candoit
    
if __name__ == '__main__':
    pass
    