# Autogenerated with SMOP 
from smop.core import *
# getDirectionalDerivative.m

    
@function
def getDirectionalDerivative(problem=None,x=None,d=None,storedb=None,key=None,*args,**kwargs):
    varargin = getDirectionalDerivative.varargin
    nargin = getDirectionalDerivative.nargin

    # Computes the directional derivative of the cost function at x along d.
    
    # function diff = getDirectionalDerivative(problem, x, d)
# function diff = getDirectionalDerivative(problem, x, d, storedb)
# function diff = getDirectionalDerivative(problem, x, d, storedb, key)
    
    # Returns the derivative at x along d of the cost function described in the
# problem structure.
    
    # storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # See also: getGradient canGetDirectionalDerivative
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Dec. 30, 2012.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getDirectionalDerivative.m:26
        key=storedb.getNewKey()
# getDirectionalDerivative.m:28
    
    
    if isfield(problem,'diff'):
        ## Compute the directional derivative using diff.
        # Check whether this function wants to deal with storedb or not.
        if 2 == nargin(problem.diff):
            diff=problem.diff(x,d)
# getDirectionalDerivative.m:38
        else:
            if 3 == nargin(problem.diff):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getDirectionalDerivative.m:41
                diff,store=problem.diff(x,d,store,nargout=2)
# getDirectionalDerivative.m:42
                storedb.setWithShared(store,key)
            else:
                if 4 == nargin(problem.diff):
                    # Pass along the whole storedb (by reference), with key.
                    diff=problem.diff(x,d,storedb,key)
# getDirectionalDerivative.m:46
                else:
                    up=MException('manopt:getDirectionalDerivative:baddiff','diff should accept 2, 3 or 4 inputs.')
# getDirectionalDerivative.m:48
                    throw(up)
    else:
        if canGetGradient(problem):
            ## Compute the directional derivative using the gradient.
            # Compute the gradient at x, then compute its inner product with d.
            grad=getGradient(problem,x,storedb,key)
# getDirectionalDerivative.m:57
            diff=problem.M.inner(x,grad,d)
# getDirectionalDerivative.m:58
        else:
            ## Abandon computing the directional derivative.
            up=MException('manopt:getDirectionalDerivative:fail',cat('The problem description is not explicit enough to ','compute the directional derivatives of f.'))
# getDirectionalDerivative.m:63
            throw(up)
    
    
    return diff
    
if __name__ == '__main__':
    pass
    