# Autogenerated with SMOP 
from smop.core import *
# getSqrtPrecon.m

    
@function
def getSqrtPrecon(problem=None,x=None,d=None,storedb=None,key=None,*args,**kwargs):
    varargin = getSqrtPrecon.varargin
    nargin = getSqrtPrecon.nargin

    # Applies the square root of the Hessian preconditioner at x along d.
    
    # function sqrtPd = getSqrtPrecon(problem, x, d)
# function sqrtPd = getSqrtPrecon(problem, x, d, storedb)
# function sqrtPd = getSqrtPrecon(problem, x, d, storedb, key)
    
    # Returns as sqrtPd the result of applying the square root of the Hessian
# preconditioner to the tangent vector d at point x. The preconditioner is
# supposed to be a symmetric, positive definite approximation of the
# inverse of the Hessian. Its square root must thus be symmetric and
# positive definite itself.
# 
# If no square root of preconditioner is available, sqrtPd = d (identity).
# Note that this may be incompatible with the preconditioner, if that one
# is supplied in the problem description. Always check with canGetPrecon
# and canGetSqrtPrecon.
    
    # storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # See also: getPrecon canGetPrecon canGetSqrtPrecon getHessian
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, April 3, 2015.
# Contributors: 
# Change log:
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getSqrtPrecon.m:31
        key=storedb.getNewKey()
# getSqrtPrecon.m:33
    
    
    if isfield(problem,'sqrtprecon'):
        ## Apply sqrtprecon for the square root of the preconditioner
        # Check whether this function wants to deal with storedb or not.
        if 2 == nargin(problem.sqrtprecon):
            sqrtPd=problem.sqrtprecon(x,d)
# getSqrtPrecon.m:43
        else:
            if 3 == nargin(problem.sqrtprecon):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getSqrtPrecon.m:46
                sqrtPd,store=problem.sqrtprecon(x,d,store,nargout=2)
# getSqrtPrecon.m:47
                storedb.setWithShared(store,key)
            else:
                if 4 == nargin(problem.sqrtprecon):
                    # Pass along the whole storedb (by reference), with key.
                    sqrtPd=problem.sqrtprecon(x,d,storedb,key)
# getSqrtPrecon.m:51
                else:
                    up=MException('manopt:getSqrtPrecon:badsqrtprecon','sqrtprecon should accept 2, 3 or 4 inputs.')
# getSqrtPrecon.m:53
                    throw(up)
    else:
        ## No preconditioner square root provided, so just use the identity.
        sqrtPd=copy(d)
# getSqrtPrecon.m:61
    
    
    return sqrtPd
    
if __name__ == '__main__':
    pass
    