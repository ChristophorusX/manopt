# Autogenerated with SMOP 
from smop.core import *
# stoppingcriterion.m

    
@function
def stoppingcriterion(problem=None,x=None,options=None,info=None,last=None,*args,**kwargs):
    varargin = stoppingcriterion.varargin
    nargin = stoppingcriterion.nargin

    # Checks for standard stopping criteria, as a helper to solvers.
    
    # function [stop, reason] = stoppingcriterion(problem, x, options, info, last)
    
    # Executes standard stopping criterion checks, based on what is defined in
# the info(last) stats structure and in the options structure.
    
    # The returned number 'stop' is 0 if none of the stopping criteria
# triggered, and a (strictly) positive integer otherwise. The integer
# identifies which criterion triggered:
#  0 : Nothing triggered;
#  1 : Cost tolerance reached;
#  2 : Gradient norm tolerance reached;
#  3 : Max time exceeded;
#  4 : Max iteration count reached;
#  5 : Maximum number of cost evaluations reached;
#  6 : User defined stopfun criterion triggered.
    
    # The output 'reason' is a string describing the triggered event.
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Dec. 30, 2012.
# Contributors: 
# Change log:
    
    #   April 2, 2015 (NB):
#       'reason' now contains the option (name and value) that triggered.
    
    stop=0
# stoppingcriterion.m:31
    reason=''
# stoppingcriterion.m:32
    stats=info[last]
# stoppingcriterion.m:34
    
    if isfield(stats,'cost') and isfield(options,'tolcost') and stats.cost <= options.tolcost:
        reason=sprintf('Cost tolerance reached; options.tolcost = %g.',options.tolcost)
# stoppingcriterion.m:39
        stop=1
# stoppingcriterion.m:40
        return stop,reason
    
    # Target gradient norm attained
    if isfield(stats,'gradnorm') and isfield(options,'tolgradnorm') and stats.gradnorm < options.tolgradnorm:
        reason=sprintf('Gradient norm tolerance reached; options.tolgradnorm = %g.',options.tolgradnorm)
# stoppingcriterion.m:47
        stop=2
# stoppingcriterion.m:48
        return stop,reason
    
    # Allotted time exceeded
    if isfield(stats,'time') and isfield(options,'maxtime') and stats.time >= options.maxtime:
        reason=sprintf('Max time exceeded; options.maxtime = %g.',options.maxtime)
# stoppingcriterion.m:55
        stop=3
# stoppingcriterion.m:56
        return stop,reason
    
    # Allotted iteration count exceeded
    if isfield(stats,'iter') and isfield(options,'maxiter') and stats.iter >= options.maxiter:
        reason=sprintf('Max iteration count reached; options.maxiter = %g.',options.maxiter)
# stoppingcriterion.m:63
        stop=4
# stoppingcriterion.m:64
        return stop,reason
    
    
    # Allotted function evaluation count exceeded
    if isfield(stats,'costevals') and isfield(options,'maxcostevals') and stats.costevals >= options.maxcostevals:
        reason=sprintf('Maximum number of cost evaluations reached; options.maxcostevals = %g.',options.maxcostevals)
# stoppingcriterion.m:71
        stop=5
# stoppingcriterion.m:72
    
    # Check whether the possibly user defined stopping criterion
    # triggers or not.
    if isfield(options,'stopfun'):
        userstop=options.stopfun(problem,x,info,last)
# stoppingcriterion.m:78
        if userstop:
            reason='User defined stopfun criterion triggered; see options.stopfun.'
# stoppingcriterion.m:80
            stop=6
# stoppingcriterion.m:81
            return stop,reason
    
    return stop,reason
    
if __name__ == '__main__':
    pass
    