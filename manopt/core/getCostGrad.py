# Autogenerated with SMOP 
from smop.core import *
# getCostGrad.m

    
@function
def getCostGrad(problem=None,x=None,storedb=None,key=None,*args,**kwargs):
    varargin = getCostGrad.varargin
    nargin = getCostGrad.nargin

    # Computes the cost function and the gradient at x in one call if possible.
    
    # function [cost, grad] = getCostGrad(problem, x)
# function [cost, grad] = getCostGrad(problem, x, storedb)
# function [cost, grad] = getCostGrad(problem, x, storedb, key)
    
    # Returns the value at x of the cost function described in the problem
# structure, as well as the gradient at x.
    
    # storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # See also: canGetCost canGetGradient getCost getGradient
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Dec. 30, 2012.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getCostGrad.m:26
        key=storedb.getNewKey()
# getCostGrad.m:28
    
    if isfield(problem,'costgrad'):
        ## Compute the cost/grad pair using costgrad.
        # Check whether this function wants to deal with storedb or not.
        if 1 == nargin(problem.costgrad):
            cost,grad=problem.costgrad(x,nargout=2)
# getCostGrad.m:38
        else:
            if 2 == nargin(problem.costgrad):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getCostGrad.m:41
                cost,grad,store=problem.costgrad(x,store,nargout=3)
# getCostGrad.m:42
                storedb.setWithShared(store,key)
            else:
                if 3 == nargin(problem.costgrad):
                    # Pass along the whole storedb (by reference), with key.
                    cost,grad=problem.costgrad(x,storedb,key,nargout=2)
# getCostGrad.m:46
                else:
                    up=MException('manopt:getCostGrad:badcostgrad','costgrad should accept 1, 2 or 3 inputs.')
# getCostGrad.m:48
                    throw(up)
    else:
        ## Revert to calling getCost and getGradient separately
        cost=getCost(problem,x,storedb,key)
# getCostGrad.m:56
        grad=getGradient(problem,x,storedb,key)
# getCostGrad.m:57
    
    
    return cost,grad
    
if __name__ == '__main__':
    pass
    