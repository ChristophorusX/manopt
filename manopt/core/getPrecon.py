# Autogenerated with SMOP 
from smop.core import *
# getPrecon.m

    
@function
def getPrecon(problem=None,x=None,d=None,storedb=None,key=None,*args,**kwargs):
    varargin = getPrecon.varargin
    nargin = getPrecon.nargin

    # Applies the preconditioner for the Hessian of the cost at x along d.
    
    # function Pd = getPrecon(problem, x, d)
# function Pd = getPrecon(problem, x, d, storedb)
# function Pd = getPrecon(problem, x, d, storedb, key)
    
    # Returns as Pd the result of applying the Hessian preconditioner to the
# tangent vector d at point x. The preconditioner is supposed to be a
# symmetric, positive definite approximation of the inverse of the Hessian.
# 
# If no preconditioner is available, Pd = d (identity).
    
    # storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # See also: getHessian
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Dec. 30, 2012.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getPrecon.m:29
        key=storedb.getNewKey()
# getPrecon.m:31
    
    
    if isfield(problem,'precon'):
        ## Precondition using precon.
        # Check whether this function wants to deal with storedb or not.
        if 2 == nargin(problem.precon):
            Pd=problem.precon(x,d)
# getPrecon.m:41
        else:
            if 3 == nargin(problem.precon):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getPrecon.m:44
                Pd,store=problem.precon(x,d,store,nargout=2)
# getPrecon.m:45
                storedb.setWithShared(store,key)
            else:
                if 4 == nargin(problem.precon):
                    # Pass along the whole storedb (by reference), with key.
                    Pd=problem.precon(x,d,storedb,key)
# getPrecon.m:49
                else:
                    up=MException('manopt:getPrecon:badprecon','precon should accept 2, 3 or 4 inputs.')
# getPrecon.m:51
                    throw(up)
    else:
        if canGetSqrtPrecon(problem):
            ## Precondition by applying the square root of the preconditioner twice.
            sqrtPd=getSqrtPrecon(problem,x,d,storedb,key)
# getPrecon.m:59
            Pd=getSqrtPrecon(problem,x,sqrtPd,storedb,key)
# getPrecon.m:60
        else:
            ## No preconditioner provided, so just use the identity.
            Pd=copy(d)
# getPrecon.m:65
    
    
    return Pd
    
if __name__ == '__main__':
    pass
    