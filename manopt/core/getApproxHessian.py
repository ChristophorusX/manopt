# Autogenerated with SMOP 
from smop.core import *
# getApproxHessian.m

    
@function
def getApproxHessian(problem=None,x=None,d=None,storedb=None,key=None,*args,**kwargs):
    varargin = getApproxHessian.varargin
    nargin = getApproxHessian.nargin

    # Computes an approximation of the Hessian of the cost fun. at x along d.
    
    # function approxhess = getApproxHessian(problem, x, d)
# function approxhess = getApproxHessian(problem, x, d, storedb)
# function approxhess = getApproxHessian(problem, x, d, storedb, key)
    
    # Returns an approximation of the Hessian at x along d of the cost function
# described in the problem structure.
    
    # storedb is a StoreDB object, key is the StoreDB key to point x.
    
    # If no approximate Hessian was provided, this call is redirected to
# getHessianFD.
# 
# See also: getHessianFD canGetApproxHessian
    
    # This file is part of Manopt: www.manopt.org.
# Original author: Nicolas Boumal, Dec. 30, 2012.
# Contributors: 
# Change log:
    
    #   April 3, 2015 (NB):
#       Works with the new StoreDB class system.
    
    # Allow omission of the key, and even of storedb.
    if logical_not(exist('key','var')):
        if logical_not(exist('storedb','var')):
            storedb=StoreDB()
# getApproxHessian.m:29
        key=storedb.getNewKey()
# getApproxHessian.m:31
    
    if isfield(problem,'approxhess'):
        ## Compute the approximate Hessian using approxhess.
        # Check whether this function wants to deal with storedb or not.
        if 2 == nargin(problem.approxhess):
            approxhess=problem.approxhess(x,d)
# getApproxHessian.m:41
        else:
            if 3 == nargin(problem.approxhess):
                # Obtain, pass along, and save the store for x.
                store=storedb.getWithShared(key)
# getApproxHessian.m:44
                approxhess,store=problem.approxhess(x,d,store,nargout=2)
# getApproxHessian.m:45
                storedb.setWithShared(store,key)
            else:
                if 4 == nargin(problem.approxhess):
                    # Pass along the whole storedb (by reference), with key.
                    approxhess=problem.approxhess(x,d,storedb,key)
# getApproxHessian.m:49
                else:
                    up=MException('manopt:getApproxHessian:badapproxhess','approxhess should accept 2, 3 or 4 inputs.')
# getApproxHessian.m:51
                    throw(up)
    else:
        ## Try to fall back to a standard FD approximation.
        approxhess=getHessianFD(problem,x,d,storedb,key)
# getApproxHessian.m:59
    
    
    return approxhess
    
if __name__ == '__main__':
    pass
    